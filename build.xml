<?xml version="1.0" encoding="utf-8"?>
<!--
 Copyright (c)     : Andreas Signer
 Version Number    : $Revision: 1.10 $
 Date of last edit : $Date: 2010-09-11 19:22:55 $
-->

<project name="cosmos-cp1" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>${ant.project.name} project build file</description>

    <!-- ================================================================ -->
    <!--  load dependency and environment configuration                   -->
    <!-- ================================================================ -->
    <property file="config/build-local.properties"/>
    <property file="config/build.properties"/>

    <!-- ================================================================ -->
    <!--  ivy settings                                                    -->
    <!-- ================================================================ -->
    <ivy:settings file="config/ivysettings.xml" />

    <!-- ================================================================ -->
    <!--  java compile properties                                         -->
    <!-- ================================================================ -->
    <property name="compile.debug" value="true" />
    <property name="compile.deprecation" value="false" />
    <property name="compile.optimize" value="true" />
    <property name="compile.encoding" value="UTF8" />
    <property name="compile.source" value="1.6" />
    <property name="compile.target" value="1.6" />
    <property name="compile.compiler" value="javac1.6" />

    <!-- ================================================================ -->
    <!--  application properties                                          -->
    <!-- ================================================================ -->
    <tstamp>
        <format property="build.timestamp" pattern="MM/dd/yyyy HH:mm:ss"/>
    </tstamp>

    <!-- ================================================================ -->
    <!--  parametrize project structure                                   -->
    <!-- ================================================================ -->
    <property name="src.dir"   location="src"/>
    <property name="test-src.dir" location="test"/>
    <property name="doc.dir"   location="doc"/>
    <property name="etc.dir"   location="etc/"/>
    <property name="resources.dir"        location="resources/java"/>
    <property name="build.dir" location="build/"/>
    <property name="dist.dir"  location="dist/"/>

    <property name="reports.dir"         location="${build.dir}/reports"/>
    <property name="classes.dir"         location="${build.dir}/classes"/>
    <property name="test-classes.dir"    location="${build.dir}/test-classes"/>
    <property name="staging.dir"         location="${build.dir}/staging"/>
    <property name="lib.dir"             location="${build.dir}/lib"/>
    <property name="generated.dir"       location="${build.dir}/generated"/>
    <property name="javadoc.dir"         location="${build.dir}/api"/>
    <property name="dmg.dir"             location="${build.dir}/dmg" />

    <!-- ================================================================ -->
    <!--  determine platform                                              -->
    <!-- ================================================================ -->
	<condition property="platform.isMac">
		<os name="Mac OS X"/>
	</condition>

    <condition property="platform.isLinux">
        <os name="Linux"/>
    </condition>

    <condition property="platform.isWindows">
        <os name="Windows"/>
    </condition>


    <!-- ================================================================ -->
    <!--  initialization, cleanup and default targets                     -->
    <!-- ================================================================ -->
    <target name="all" depends="dist" description="build everything"/>

    <target name="retrieve">
        <delete dir="lib"/>
        <mkdir dir="lib"/>
        <ivy:retrieve pattern="lib/[conf]/[artifact].[ext]" symlink="true" />
    </target>

    <target name="dependency-report" depends="retrieve">
        <ivy:report />
    </target>

<target name="init-os-dependent-mac" if="platform.isMac">
        <path id="osdep.classpath">
            <fileset dir="lib/macosx-x86_64">
                <include name="*.jar"/>
            </fileset>
        </path>
        <property name="vm.params" value="-XstartOnFirstThread"/>
    </target>

    <target name="init-os-dependent-linux" if="platform.isLinux">
        <path id="osdep.classpath">
            <fileset dir="lib/linux-x86_64">
                <include name="*.jar"/>
            </fileset>
        </path>
        <property name="vm.params" value="-Ddummy"/>
    </target>

    <target name="init-os-dependent-win" if="platform.isWindows">
        <path id="osdep.classpath">
            <fileset dir="lib/win32">
                <include name="*.jar"/>
            </fileset>
        </path>
        <property name="vm.params" value="-Ddummy"/>
    </target>

    <target name="init-os-dependent" depends="init-os-dependent-mac, init-os-dependent-win, init-os-dependent-linux"/>

    <target name="init" depends="retrieve, init-os-dependent"
        description="initialization project structure and environment">

        <tstamp/>
        <echo message="--------- ${ant.project.name} ---------"/>
        <echo message=" "/>
        <echo message="building file ${ant.file} with ${ant.version}"/>
        <echo message=" "/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${dist.dir}"/>

        <mkdir dir="${reports.dir}"/>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test-classes.dir}"/>
        <mkdir dir="${lib.dir}"/>
        <mkdir dir="${javadoc.dir}"/>

        <mkdir dir="${dist.dir}/mac"/>
        <mkdir dir="${dist.dir}/win32"/>
        <mkdir dir="${dist.dir}/linux-x86_64"/>

        <mkdir dir="${lib.dir}/mac"/>
        <mkdir dir="${lib.dir}/win32"/>
        <mkdir dir="${lib.dir}/linux-x86_64"/>

        <mkdir dir="${staging.dir}"/>
        <mkdir dir="${staging.dir}/config"/>
        <mkdir dir="${staging.dir}/mac"/>
        <mkdir dir="${staging.dir}/win32"/>
        <mkdir dir="${staging.dir}/linux-x86_64"/>
        <mkdir dir="${staging.dir}/common"/>

        <mkdir dir="${generated.dir}"/>
        <mkdir dir="${generated.dir}/mac/src/com/asigner/cp1"/>
        <mkdir dir="${generated.dir}/mac/classes"/>
        <mkdir dir="${generated.dir}/win32/src/com/asigner/cp1"/>
        <mkdir dir="${generated.dir}/win32/classes"/>
        <mkdir dir="${generated.dir}/linux-x86_64/src/com/asigner/cp1"/>
        <mkdir dir="${generated.dir}/linux-x86_64/classes"/>

        <mkdir dir="${dmg.dir}"/>

        <path id="compile.classpath">
            <fileset dir="lib/common" erroronmissingdir="false">
                <include name="*.jar"/>
            </fileset>

            <path refid="osdep.classpath"/>

            <!-- the generated productinfo.jar. doesn't matter which one, so use linux -->
            <pathelement location="${lib.dir}/linux-x86_64/productinfo.jar"/>
        </path>

        <path id="runtime.classpath">
            <pathelement location="${lib.dir}/${main.jar.name}"/>
            <pathelement location="${lib.dir}/linux-x86_64/productinfo.jar"/>

            <!-- config -->
            <pathelement path="${etc.dir}"/>

            <!-- external libs -->
            <path refid="compile.classpath"/>
        </path>

        <path id="test.classpath">
            <fileset dir="lib/test">
                <include name="*.jar"/>
            </fileset>
            <pathelement location="${classes.dir}"/>
            <pathelement location="${test-classes.dir}"/>
            <pathelement location="${test-src.dir}"/> <!-- for resources -->
            <path refid="compile.classpath"/>
        </path>

        <path id="dbgen.classpath">
            <fileset dir="lib/dbgen">
                <include name="*.jar"/>
            </fileset>
        </path>
    </target>

    <target name="clean" description="cleans all generated files and directories" >
        <delete dir="${dmg.dir}"/>

        <delete dir="${staging.dir}/common"/>
        <delete dir="${staging.dir}/linux-x86_64"/>
        <delete dir="${staging.dir}/win32"/>
        <delete dir="${staging.dir}/mac"/>
        <delete dir="${staging.dir}/config"/>
        <delete dir="${staging.dir}"/>

        <delete dir="${generated.dir}"/>
        <delete dir="${javadoc.dir}"/>
        <delete dir="${lib.dir}"/>
        <delete dir="${classes.dir}"/>

        <delete dir="${dist.dir}"/>
        <delete dir="${build.dir}"/>
    </target>

    <!-- ================================================================ -->
    <!--  macro defs                                                      -->
    <!-- ================================================================ -->

    <macrodef name="generate-productinfo" description="generates the ProductInfo class">
        <attribute name="architecture"/>
        <attribute name="platform"/>
        <attribute name="classFile"/>
        <attribute name="className"/>
        <attribute name="package"/>
        <sequential>
            <echo encoding="UTF-8" file="${generated.dir}/@{architecture}/@{classFile}">
package @{package};
public class @{className} {
public String getProduct() { return "${app.name}"; }
public String getVersion() { return "${version}"; }
public String getPlatform() { return "@{platform}"; }
public String getArchitecture() { return "@{architecture}"; }
public String getCopyright() { return "${app.copyright}"; }
public String getBuildTime() { return "${build.timestamp}"; }
public String getSettingsPropertiesName() { return "${settings.properties.name}"; }
}
            </echo>
        </sequential>
    </macrodef>

    <macrodef name="compile-productinfo" description="compiles generated ProductInfo class">
        <attribute name="architecture"/>
        <sequential>
            <javac fork="true"
                destdir="${generated.dir}/@{architecture}/classes"
                debug="${compile.debug}"
                optimize="${compile.optimize}"
                deprecation="${compile.deprecation}"
                encoding="${compile.encoding}"
                source="${compile.source}"
                target="${compile.target}"
                compiler="${compile.compiler}"
                includeantruntime="no">
                <src path="${generated.dir}/@{architecture}/src" />
                <include name="**/*.java"/>
                <classpath refid="compile.classpath"/>
            </javac>
        </sequential>
    </macrodef>

    <macrodef name="jar-productinfo" description="compiles generated ProductInfo class">
        <attribute name="architecture"/>
        <sequential>
            <jar jarfile="${lib.dir}/@{architecture}/productinfo.jar" index="true">
                <fileset dir="${generated.dir}/@{architecture}/classes">
                    <include name="com/asigner/cp1/**/*.class"/>
                </fileset>
            </jar>
        </sequential>
    </macrodef>

    <macrodef name="generate-single-jar" description="generates a single jar for a directory">
        <attribute name="directory"/>
        <attribute name="targetname"/>
        <sequential>
            <property name="tmpdir" value="${java.io.tmpdir}/${user.name}/praeseradmin/@{architecture}" />
            <mkdir dir="${tmpdir}"/>
            <unzip dest="${tmpdir}">
                <fileset dir="@{directory}" includes="**/*.jar"/>
            </unzip>
            <delete dir="${tmpdir}/META-INF"/>
            <jar jarfile="@{targetname}" index="true">
                <fileset dir="${tmpdir}"/>
            </jar>
            <delete dir="${tmpdir}"/>
        </sequential>
    </macrodef>

    <!-- ================================================================ -->
    <!--  platform specific code generation                               -->
    <!-- ================================================================ -->

    <target name="generate-productinfo" depends="init" description="generates product-info for every platform">
        <!-- generate productinfo for product itself -->
        <generate-productinfo
            architecture="linux-x86_64"
            platform="Linux"
            classFile="src/com/asigner/cp1/ProductInfo.java"
            className="ProductInfo"
            package="com.asigner.cp1"
        />
        <generate-productinfo
            architecture="win32"
            platform="Windows"
            classFile="src/com/asigner/cp1/ProductInfo.java"
            className="ProductInfo"
            package="com.asigner.cp1"
        />
        <generate-productinfo
            architecture="mac"
            platform="Mac-OSX"
            classFile="src/com/asigner/cp1/ProductInfo.java"
            className="ProductInfo"
            package="com.asigner.cp1"
        />
    </target>

    <!-- ================================================================ -->
    <!--  compile targets                                                 -->
    <!-- ================================================================ -->
    <target name="build" depends="compile, jars"
            description="build target, performs [compile, jars]"/>

    <target name="compile" depends="init, jars-productinfo" description="compiles all sources">
        <javac fork="true"
            destdir="${classes.dir}"
            debug="${compile.debug}"
            optimize="${compile.optimize}"
            deprecation="${compile.deprecation}"
            encoding="${compile.encoding}"
            includeantruntime="no">
            <src path="${src.dir}" />
            <include name="**/*.java"/>
            <classpath refid="compile.classpath"/>
        </javac>
    </target>

    <target name="compile-productinfo" depends="generate-productinfo" description="compiles productinfo sources">
        <compile-productinfo architecture="linux-x86_64"/>
        <compile-productinfo architecture="win32"/>
        <compile-productinfo architecture="mac"/>
    </target>

    <target name="compile-tests" depends="compile">
      <javac fork="true"
            destdir="${test-classes.dir}"
            debug="${compile.debug}"
            optimize="${compile.optimize}"
            deprecation="${compile.deprecation}"
            encoding="${compile.encoding}"
            includeantruntime="no"
            source="${compile.source}"
            compiler="${compile.compiler}"
            target="${compile.target}">

        <src path="${test-src.dir}" />
        <include name="**/*.java"/>
        <classpath refid="test.classpath"/>
      </javac>
    </target>

    <!-- ================================================================ -->
    <!--  tests                                                           -->
    <!-- ================================================================ -->
    <target name="test" depends="compile-tests">
      <junit printsummary="yes" haltonfailure="yes" showoutput="yes">
        <classpath refid="test.classpath"/>
        <formatter type="plain"/>
        <batchtest todir="${reports.dir}">
          <fileset dir="${test-src.dir}">
            <include name="**/*Test.java"/>
          </fileset>
        </batchtest>
      </junit>
    </target>

    <!-- ================================================================ -->
    <!--  java archives (JARs)                                            -->
    <!-- ================================================================ -->
    <target name="jars-productinfo" depends="compile-productinfo" >
            <jar-productinfo architecture="linux-x86_64"/>
            <jar-productinfo architecture="win32"/>
            <jar-productinfo architecture="mac"/>
    </target>

    <target name="jars" depends="compile, test" >
        <jar jarfile="${lib.dir}/${main.jar.name}" index="true">
            <manifest>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Implementation-Title" value="${ant.project.name}"/>
                <attribute name="Implementation-Vendor" value="${vendor}"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Build-Date"  value="${TODAY}"/>
                <attribute name="Build-Stamp" value="${DSTAMP}${TSTAMP}"/>
                <attribute name="Build-Host" value="${os.name} ${os.version}, ${os.arch}"/>
                <attribute name="Build-Environment" value="Java ${java.version}, ${java.vendor}"/>
            </manifest>

            <!-- classes -->
            <fileset dir="${build.dir}/classes"/>

            <!-- resources -->
            <fileset dir="${resources.dir}" includes="com/asigner/**/*.ico"/>
            <fileset dir="${resources.dir}" includes="com/asigner/**/*.gif"/>
            <fileset dir="${resources.dir}" includes="com/asigner/**/*.png"/>
            <fileset dir="${resources.dir}" includes="com/asigner/**/*.txt"/>
        </jar>
    </target>

    <!-- ================================================================ -->
    <!--  stating targets                                            -->
    <!-- ================================================================ -->
    <target name="staging" depends="jars" description="prepares the files for install4j">

        <!-- CONFIG files
        <copy todir="${staging.dir}/config">
            <fileset dir="${etc.dir}">
                <include name="**/*.properties"/>
            </fileset>
        </copy>
        -->

        <!-- common files -->
        <copy todir="${staging.dir}/common">
            <fileset file="${lib.dir}/${main.jar.name}"/>
            <fileset dir="lib/common"/>
        </copy>
        <generate-single-jar directory="${staging.dir}/common" targetname="${staging.dir}/common.jar"/>

        <!-- linux specific files -->
        <copy todir="${staging.dir}/linux-x86_64">
            <fileset file="${lib.dir}/linux-x86_64/productinfo.jar"/>
            <fileset dir="lib/linux-x86_64"/>
        </copy>

        <!-- mac specific files -->
        <copy todir="${staging.dir}/mac">
            <fileset file="${lib.dir}/mac/productinfo.jar"/>
            <fileset dir="lib/macosx-x86_64"/>
        </copy>

        <!-- win specific files -->
        <copy todir="${staging.dir}/win32">
            <fileset file="${lib.dir}/win32/productinfo.jar"/>
            <fileset dir="lib/win32"/>
        </copy>
    </target>

    <!-- ================================================================ -->
    <!--  distribution targets                                            -->
    <!-- ================================================================ -->
    <target name="dist" depends="dist-mac, dist-win, dist-linux" description="builds Windows/Linux/Mac distributions"/>

    <target name="dist-mac" depends="staging" description="builds the Mac distribution">
	<generate-single-jar directory="${staging.dir}/mac" targetname="${dist.dir}/cp1-mac.jar"/>
    </target>

    <target name="dist-win" depends="staging" description="builds the Windows distribution">
        <generate-single-jar directory="${staging.dir}/win32" targetname="${dist.dir}/cp1-win32.jar"/>
    </target>

    <target name="dist-linux" depends="staging" description="builds the Linux distribution">
        <generate-single-jar directory="${staging.dir}/linux-x86_64" targetname="${dist.dir}/cp1-linux-x86_64.jar"/>
    </target>

    <!-- ================================================================ -->
    <!--  run                                                             -->
    <!-- ================================================================ -->
    <target name="run" depends="jars">
        <java classname="com.asigner.cp1.emulation.Main" fork="true">
            <classpath refId="runtime.classpath"/>
            <classpath>
                <!-- resources -->
                <pathelement location="${src.dir}"/>
            </classpath>
            <jvmarg value="${vm.params}"/>
            <jvmarg value="-Djava.util.logging.SimpleFormatter.format=%1$tc: %4$7s: %5$s%6$s%n"/>
            <env key="LIBOVERLAY_SCROLLBAR" value="0"/>  <!-- use proper scrollbars -->
        </java>
    </target>

    <!-- ================================================================ -->
    <!--  debug                                                           -->
    <!-- ================================================================ -->
    <target name="debug" depends="jars">
        <java classname="com.asigner.cp1.emulation.Main" fork="true">
            <classpath refId="runtime.classpath"/>
            <classpath>
                <!-- resources -->
                <pathelement location="${src.dir}"/>
            </classpath>
        	<jvmarg value="${vm.params}"/>
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,address=8000"/>
            <env key="LIBOVERLAY_SCROLLBAR" value="0"/>  <!-- use proper scrollbars -->
        </java>
    </target>

</project>
