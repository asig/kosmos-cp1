/*
 * Copyright (c) 2017 Andreas Signer <asigner@gmail.com>
 *
 * This file is part of kosmos-cp1.
 *
 * kosmos-cp1 is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * kosmos-cp1 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with kosmos-cp1.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'gradle.plugin.edu.sc.seis.gradle:launch4j:1.6.2'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'edu.sc.seis.launch4j' version '1.6.2'
}

mainClassName = "com.asigner.cp1.ui.Main"

apply from: "repositories.gradle"

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

//
// Load custom properties
//
def props = new Properties()
props.load(new FileInputStream("build.properties"))
props.each { key, val ->
    project.ext.set(key, val)
}


configurations {
    providedCompile

    compile

    // OS specific runtimes
    runtimeLinux
    runtimeMac
    runtimeWin
}

dependencies {
    // For compilation, we use the system's runtime.
    // providedCompile group: 'org.eclipse', name: 'platform-minimal', version: '4.5.1', configuration: 'linux-gtk-x86_64'

    compile 'com.google.guava:guava:19.0'
    compile 'commons-io:commons-io:2.5'

    // OS-dependent runtimes
    runtimeLinux group: 'org.eclipse', name: 'platform-minimal', version: '4.6.1', configuration: 'linux-gtk-x86_64'
    runtimeMac group: 'org.eclipse', name: 'platform-minimal', version: '4.6.1', configuration: 'macosx-cocoa-x86_64'
    runtimeWin group: 'org.eclipse', name: 'platform-minimal', version: '4.6.1', configuration: 'win32-x86'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
}

sourceSets {
    main {
        java {
            srcDirs += [ "build/src" ]
        }
    }
}

// Setup OS dependent runtime path
def osDependentRuntime;
String osName = System.getProperty("os.name").toLowerCase();
if (osName.contains("windows")) {
    osDependentRuntime = configurations.runtimeWin
} else if (osName.contains("linux")) {
    osDependentRuntime = configurations.runtimeLinux
} else {
    osDependentRuntime = configurations.runtimeMac
}

compileJava {
    // For compilation, we use the system's runtime.
    // classpath += configurations.providedCompile
    classpath += osDependentRuntime
}

test {
    classpath += osDependentRuntime;
}

run {
    classpath += osDependentRuntime;

    def os = System.getProperty("os.name").split(" ")[0]
    if (os == "Mac") {
        jvmArgs "-XstartOnFirstThread"
    }
}

task generateBuildInfo(type:com.asigner.build.GenerateBuildInfoTask)

compileJava {
    dependsOn generateBuildInfo
}

// Use this task if you need all runtime deps in one place. Helpful for me when playing with Eclipse (to get a
// decent SWT UI designer...)
task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.runtime
    from osDependentRuntime
}

//
// Shadow jar targets
//

task shadowJarWin(type: ShadowJar) {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from sourceSets.main.output //tells the task to include the project code
    baseName = project.archivesBaseName
    destinationDir = file("$rootDir/build/dist/win")
    classifier = "win"
    configurations = [ project.configurations.runtime, project.configurations.runtimeWin ] //tells the task to shadow in the jars files in the 'runtime' scope

    // Don't include signatures
    exclude "META-INF/*.SF"
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    mergeServiceFiles()
}

task shadowJarLinux(type: ShadowJar) {
    manifest {
        attributes 'Main-Class': mainClassName
    }

    from sourceSets.main.output //tells the task to include the project code
    baseName = project.archivesBaseName
    destinationDir = file("$rootDir/build/dist/linux")
    classifier = "linux"
    configurations = [ project.configurations.runtime, project.configurations.runtimeLinux ] //tells the task to shadow in the jars files in the 'runtime' scope

    // Don't include signatures
    exclude "META-INF/*.SF"
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    mergeServiceFiles()
}

task shadowJarMac(type: ShadowJar) {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from sourceSets.main.output //tells the task to include the project code
    baseName = project.archivesBaseName
    destinationDir = file("$rootDir/build/dist/mac")
    classifier = "mac"
    configurations = [ project.configurations.runtime, project.configurations.runtimeMac ] //tells the task to shadow in the jars files in the 'runtime' scope

    // Don't include signatures
    exclude "META-INF/*.SF"
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    mergeServiceFiles()
}

shadowJar {
    dependsOn shadowJarLinux
    dependsOn shadowJarWin
    dependsOn shadowJarMac
}

//
// launch4j
//

launch4j {
    // Stupid launch4j gradle plugin ignores copyConfigurable when building the XML file,
    // so we need to fall back to fat jar.
    outfile = 'ProgrammableFun.exe'
    mainClassName = project.mainClassName
    copyConfigurable = project.tasks.shadowJarWin.outputs.files
    jar = "lib/${project.tasks.shadowJarWin.archiveName}"
    icon = '../../resources/turtle.ico' // Icon is relative to build/launch4j
}

createExe {
    dependsOn shadowJarWin
}

//
// Packages
//

task makePackageWin(type: Exec) {
    dependsOn createExe // This this for whatever reason not work...
    file("$rootDir/build/installers").mkdirs()
    workingDir 'src/installer/win'
    commandLine 'makensis', 'KosmosCP1Sim.nsi'
}

task stagePackageDeb(type: Copy) {
    dependsOn jar

    into "$buildDir/stage/linux/jars"
    from configurations.runtime
    from osDependentRuntime
    from jar.outputs
}

task makePackageDeb {
    dependsOn stagePackageDeb
    doLast {
        exec {
            workingDir 'src/installer/deb'
            commandLine 'dpkg-buildpackage', '-b', '-uc'
        }
        file("$rootDir/build/installers").mkdirs()
        file("$rootDir/src/installer").eachFile {
            if (it.name.endsWith(".deb")) {
                it.renameTo("$rootDir/build/installers/" + it.name)
            }
        }
    }
}

task makePackages {
    dependsOn makePackageWin
    dependsOn makePackageDeb
}
