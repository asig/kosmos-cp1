/*
 * Copyright (c) 2017 Andreas Signer <asigner@gmail.com>
 *
 * This file is part of kosmos-cp1.
 *
 * kosmos-cp1 is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * kosmos-cp1 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with kosmos-cp1.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '5.0.0'
}

mainClassName = "com.asigner.cp1.ui.KosmosCP1"

apply from: "repositories.gradle"

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

//
// Load custom properties
//
def props = new Properties()
props.load(new FileInputStream("build.properties"))
props.each { key, val ->
    project.ext.set(key, val)
}

configurations {
    providedCompile

    compile

    // OS specific runtimes
    runtimeLinux32
    runtimeLinux64
    runtimeMac
    runtimeWin32
    runtimeWin64
}

dependencies {
    compile 'com.google.guava:guava:19.0'
    compile 'commons-io:commons-io:2.5'

    // OS-dependent runtimes
    runtimeLinux32 group: 'org.eclipse', name: 'platform-minimal', version: '4.7.1a', configuration: 'linux-gtk-x86'
    runtimeLinux64 group: 'org.eclipse', name: 'platform-minimal', version: '4.7.1a', configuration: 'linux-gtk-x86_64'
    runtimeMac group: 'org.eclipse', name: 'platform-minimal', version: '4.7.1a', configuration: 'macosx-cocoa-x86_64'
    runtimeWin32 group: 'org.eclipse', name: 'platform-minimal', version: '4.7.1a', configuration: 'win32-x86'
    runtimeWin64 group: 'org.eclipse', name: 'platform-minimal', version: '4.7.1a', configuration: 'win32-x86_64'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
}

sourceSets {
    main {
        java {
            srcDirs += [ "build/src" ]
        }
    }
}

// Get some general information about the build system
String osName = System.getProperty("os.name").toLowerCase();
String os = osName.split(" ")[0]
String arch = System.getProperty("os.arch").toLowerCase();

// Setup OS dependent runtime path
def osDependentRuntime;
if (osName.contains("windows")) {
    if (arch.contains("64")) {
        osDependentRuntime = configurations.runtimeWin64
    } else {
        osDependentRuntime = configurations.runtimeWin32
    }
} else if (osName.contains("linux")) {
    if (arch.contains("64")) {
        osDependentRuntime = configurations.runtimeLinux64
    } else {
        osDependentRuntime = configurations.runtimeLinux32
    }
} else {
    osDependentRuntime = configurations.runtimeMac
}

compileJava {
    // For compilation, we use the system's runtime.
    // classpath += configurations.providedCompile
    classpath += osDependentRuntime
}

test {
    classpath += osDependentRuntime;
}

run {
    classpath += osDependentRuntime;
    if (os == "mac") {
        jvmArgs "-XstartOnFirstThread"
    }
}

task runUiGenerators(type: JavaExec) {
    dependsOn compileJava
    classpath = sourceSets.main.runtimeClasspath + osDependentRuntime;
    main = "com.asigner.cp1.uigenerator.AllGenerators"
}

task generateBuildInfo(type:com.asigner.build.GenerateBuildInfoTask)

compileJava {
    dependsOn generateBuildInfo
}

// Use this task if you need all runtime deps in one place. Helpful for me when
// playing with Eclipse (to get a decent SWT UI designer...)
task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.runtime
    from osDependentRuntime
}

//
// Shadow jar targets
//
["win32", "win64", "linux32", "linux64", "mac"].eachWithIndex { env, index ->

    def envUc = env.substring(0, 1).toUpperCase() + env.substring(1)

    task "shadowJar${envUc}"(type: ShadowJar) {
        manifest {
            attributes 'Main-Class': mainClassName
        }
        from sourceSets.main.output //tells the task to include the project code
        baseName = project.archivesBaseName
        destinationDir = file("$rootDir/build/dist/${env}")
        classifier = "${env}"
        configurations = [ project.configurations.runtime, project.configurations["runtime${envUc}"] ] //tells the task to shadow in the jars files in the 'runtime' scope

        // Don't include signatures
        exclude "META-INF/*.SF"
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'

        mergeServiceFiles()
    }

}

shadowJar {
    dependsOn shadowJarLinux32
    dependsOn shadowJarWin32
    dependsOn shadowJarLinux64
    dependsOn shadowJarWin64
    dependsOn shadowJarMac
}

//
// launch4j
//

["32", "64"].eachWithIndex { bits, index ->

    task "createExe${bits}"(type: JavaExec) {
        dependsOn "shadowJarWin${bits}"

        main = "net.sf.launch4j.Main"
        classpath = files("tools/launch4j/launch4j.jar")
        args "src/installer/win/l4j_${bits}.xml"
    }

}

//
// Packages
//

task makePackageWin32(type: Exec) {
    dependsOn createExe32 // This does for whatever reason not work...

    file("$rootDir/build/installers").mkdirs()
    workingDir 'src/installer/win'
    commandLine 'makensis', "-DVERSION=${project.ext.version}", '-DEXE_PATH=../../../build/dist/win32/KosmosCP1.exe', '-DARCH=x86', 'KosmosCP1.nsi'
}

task makePackageWin64(type: Exec) {
    dependsOn createExe64 // This does for whatever reason not work...

    file("$rootDir/build/installers").mkdirs()
    workingDir 'src/installer/win'
    commandLine 'makensis', "-DVERSION=${project.ext.version}", '-DEXE_PATH=../../../build/dist/win64/KosmosCP1.exe','-DARCH=x86_64', 'KosmosCP1.nsi'
}

task stagePackageDeb64(type: Copy) {
    dependsOn jar

    into "$buildDir/stage/linux64/jars"
    from configurations.runtime
    from osDependentRuntime
    from jar.outputs
}

task makePackageDeb64 {
    dependsOn stagePackageDeb64
    doLast {
        exec {
            workingDir 'src/installer/deb'
            commandLine 'dpkg-buildpackage', '-b', '-uc'
        }
        file("$rootDir/build/installers").mkdirs()
        file("$rootDir/src/installer").eachFile {
            if (it.name.endsWith(".deb")) {
                it.renameTo("$rootDir/build/installers/" + it.name)
            }
        }
    }
}

task makePackages {
    dependsOn makePackageWin32
    dependsOn makePackageWin64
    dependsOn makePackageDeb64
}
