name: Build Windows binaries

on:
  workflow_call:
    inputs:
      artifact-retention-days:
        description: 'Number of days to retain artifacts'
        default: 1
        required: false
        type: number
      version:
        description: 'Version to build'
        required: true
        type: string
    outputs:
      artifact-name:
        value: ${{ jobs.build-win.outputs.artifact-name }}
      artifact-content-type:
        value: ${{ jobs.build-win.outputs.artifact-content-type }}
        
  workflow_dispatch:
      inputs:
        artifact-retention-days:
          description: 'Number of days to retain artifacts'
          default: 1
          required: false
          type: number
        version:
          description: 'Version to build'
          required: true
          type: string
              
 
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  EXE_NAME: kosmos-cp1.exe
  QT_VERSION: '6.8.3'
  PRODUCT_NAME: "Kosmos CP1 Emulator"
  INSTALLER_NAME: "KosmosCP1Emulator-${{ inputs.version }}-x86_64.exe"
  VERSION: ${{ inputs.version }}
  BUILD_DIR: ${{ github.workspace }}/build

jobs:
  build-win:
    runs-on: windows-latest
    outputs:
      artifact-name: ${{ steps.set-outputs.outputs.artifact-name }}
      artifact-content-type: ${{ steps.set-outputs.outputs.artifact-content-type }}
    steps:           
      - run: |          
          echo "Running on Windows"
          echo "artifact-retention-days: ${{ inputs.artifact-retention-days }}"
          echo "version: ${{ inputs.version }}"
          echo "Env-vars:"
          env

      - uses: actions/checkout@v4
   
      # Install ninja
      - uses: seanmiddleditch/gha-setup-ninja@master

      # Install qt
      - uses: jurplel/install-qt-action@v4
        with:
            aqtversion: '==3.1.*'
            version: ${{ env.QT_VERSION }}
            host: 'windows'
            target: 'desktop'
            arch: 'win64_mingw'
            tools: 'tools_mingw1310'
            install-deps: true
    

      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      - run: >
          cmake -B ${{ env.BUILD_DIR }}
          -DCMAKE_CXX_COMPILER=g++.exe
          -DCMAKE_C_COMPILER=gcc.exe
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          -G "Ninja"
          -S ${{ github.workspace }}

      # build binary
      - run: cmake --build ${{ env.BUILD_DIR }} --config ${{env.BUILD_TYPE}}
      
      # Copy QT DLLs to the build dir
      - run: windeployqt.exe --release ${{ env.BUILD_DIR }}/${{ env.EXE_NAME }}
      
      # winqtdeploy seems to pick the wrong mingw runtime libs. Copy them manually
      - run: copy ${{ env.QT_ROOT_DIR }}/../../Tools/mingw1310_64/bin/*.dll ${{ env.BUILD_DIR }}/ 
      
      # Build installer
      - run: makensis /INPUTCHARSET UTF8  /NOCD /DVERSION=${{ env.VERSION }} /DARCH=x86_64 /DINSTALLER_NAME=${{ env.INSTALLER_NAME }} /DSOURCE_DIR=${{ github.workspace }} /DBUILD_DIR=${{ env.BUILD_DIR }} installer/win/installer.nsi

      - id: set-outputs
        shell: bash
        run: |
          echo "artifact-name=${{ env.INSTALLER_NAME }}" >> "$GITHUB_OUTPUT"
          echo "artifact-content-type=application/octet-stream" >> "$GITHUB_OUTPUT"

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: windows-binary
          path: ${{ env.BUILD_DIR }}/${{ env.INSTALLER_NAME }}
          retention-days: ${{ github.event.inputs.artifact-retention-days }}
          if-no-files-found: error
          overwrite: true
